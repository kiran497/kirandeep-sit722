name: CD - Stage 3 (Production)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AKS_RG: ${{ vars.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}   # kiranacr722.azurecr.io
  REPO_PREFIX: sit722
  PROD_NS: ${{ vars.PROD_NAMESPACE || 'prod-sit722-kiran' }}
  TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      - name: Ensure prod namespace exists
        run: kubectl get ns "${PROD_NS}"

      - name: Ensure ACR pull secret in prod
        run: |
          CLIENT_ID=$(jq -r '.clientId' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          CLIENT_SECRET=$(jq -r '.clientSecret' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          kubectl -n "${PROD_NS}" delete secret acr-cred >/dev/null 2>&1 || true
          kubectl -n "${PROD_NS}" create secret docker-registry acr-cred \
            --docker-server="${REGISTRY}" \
            --docker-username="${CLIENT_ID}" \
            --docker-password="${CLIENT_SECRET}"

      - name: Update images to commit SHA
        run: |
          kubectl -n "${PROD_NS}" set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG}
          kubectl -n "${PROD_NS}" set image deploy/product-service  product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG}
          kubectl -n "${PROD_NS}" set image deploy/order-service    order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG}
          kubectl -n "${PROD_NS}" set image deploy/frontend         frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG}

      - name: Wait for rollout
        run: |
          set -e
          for d in customer-service product-service order-service frontend; do
            echo "Waiting for $d..."
            kubectl -n "${PROD_NS}" rollout status deploy/$d --timeout=300s
          done
