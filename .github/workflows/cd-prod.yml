name: CD - Stage 3 (Production)

on:
  push:
    branches: [ main ]         # auto-deploy on push to main
  workflow_dispatch: {}        # manual button

concurrency:
  group: prod-${{ github.sha }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AKS_RG: ${{ vars.AKS_RESOURCE_GROUP }}        # rg-sit722-kiran
  AKS_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}     # kiranaks722
  PROD_NS: prod-sit722-kiran
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}     # kiranacr722.azurecr.io
  REPO_PREFIX: sit722
  TAG: prod-latest                               # <- images promoted in step 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout testing branch (manifests live here)
        uses: actions/checkout@v4
        with:
          ref: testing
          fetch-depth: 1

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      - name: Ensure prod namespace
        run: |
          kubectl get ns "${PROD_NS}" >/dev/null 2>&1 || kubectl create ns "${PROD_NS}"
          kubectl get ns "${PROD_NS}"

      - name: ACR imagePullSecret (acr-cred)
        run: |
          CLIENT_ID=$(jq -r '.clientId' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          CLIENT_SECRET=$(jq -r '.clientSecret' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          kubectl -n "${PROD_NS}" delete secret acr-cred >/dev/null 2>&1 || true
          kubectl -n "${PROD_NS}" create secret docker-registry acr-cred \
            --docker-server="${REGISTRY}" \
            --docker-username="${CLIENT_ID}" \
            --docker-password="${CLIENT_SECRET}"
          kubectl -n "${PROD_NS}" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: App DB secret (ecomm-secrets)
        run: |
          kubectl -n "${PROD_NS}" delete secret ecomm-secrets >/dev/null 2>&1 || true
          kubectl -n "${PROD_NS}" create secret generic ecomm-secrets \
            --from-literal=POSTGRES_USER=postgres \
            --from-literal=POSTGRES_PASSWORD=postgres

      # DBs + MQ first
      - name: Apply infra (DBs + MQ)
        run: |
          kubectl -n "${PROD_NS}" apply -f k8s/customer-db.yaml
          kubectl -n "${PROD_NS}" apply -f k8s/product-db.yaml
          kubectl -n "${PROD_NS}" apply -f k8s/order-db.yaml
          kubectl -n "${PROD_NS}" apply -f k8s/rabbitmq.yaml
          sleep 15

      - name: Apply apps
        run: |
          # sed-inject prod-latest tags at apply time (optional; your YAMLs already use :testing-latest)
          kubectl -n "${PROD_NS}" apply -f k8s/customer-service.yaml
          kubectl -n "${PROD_NS}" set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG}

          kubectl -n "${PROD_NS}" apply -f k8s/product-service.yaml
          kubectl -n "${PROD_NS}" set image deploy/product-service product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG}

          kubectl -n "${PROD_NS}" apply -f k8s/order-service.yaml
          kubectl -n "${PROD_NS}" set image deploy/order-service order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG}

          kubectl -n "${PROD_NS}" apply -f k8s/frontend.yaml
          kubectl -n "${PROD_NS}" set image deploy/frontend frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG}

      - name: Smoke test (unique curl pod)
        run: |
          set -euo pipefail
          CURL_POD="curl-prod-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          kubectl -n "${PROD_NS}" delete pod -l app=curl-test --ignore-not-found || true
          kubectl -n "${PROD_NS}" run "${CURL_POD}" --image=curlimages/curl:8.10.1 --labels app=curl-test --restart=Never --command -- sleep 3600
          kubectl -n "${PROD_NS}" wait --for=condition=Ready "pod/${CURL_POD}" --timeout=120s

          for svc in customer-service product-service order-service; do
            echo "Probing $svc ..."
            for i in $(seq 1 90); do
              if kubectl -n "${PROD_NS}" exec "${CURL_POD}" -- sh -c "curl -sf http://$svc:8000/ >/dev/null"; then
                echo "$svc OK"; break
              fi
              sleep 5
              if [ $i -eq 90 ]; then
                echo "ERROR: $svc did not respond."
                kubectl -n "${PROD_NS}" get pods -o wide
                kubectl -n "${PROD_NS}" describe deploy/$svc | sed -n '1,200p' || true
                kubectl -n "${PROD_NS}" logs deploy/$svc --tail=200 || true
                exit 1
              fi
            done
          done

          kubectl -n "${PROD_NS}" delete pod "${CURL_POD}" --ignore-not-found || true

      - name: Snapshot (always)
        if: always()
        run: |
          kubectl -n "${PROD_NS}" get all -o wide
          kubectl -n "${PROD_NS}" get svc
