name: CI - Stage 1 (Testing)

on:
  push:
    branches: [ testing ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}      # e.g. kiranacr722.azurecr.io
  REPO_PREFIX: sit722                            
  IMG_SHA: ${{ github.sha }}
  TEST_TAG: testing-latest

jobs:
  unit_tests:
    name: run unit tests (${{ matrix.svc }})
    runs-on: ubuntu-latest

    services:
      pg:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    strategy:
      fail-fast: false
      matrix:
        svc: [customer_service, product_service, order_service]
        include:
          - svc: customer_service
            path: backend/customer_service
            db: customers
          - svc: product_service
            path: backend/product_service
            db: products
          - svc: order_service
            path: backend/order_service
            db: orders

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: os deps for psycopg2
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libpq-dev gcc postgresql-client

      - name: create per-service database
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break || sleep 2
          done
          createdb -h 127.0.0.1 -p 5432 -U postgres ${{ matrix.db }} || true

      - name: cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.path)) }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: install deps
        working-directory: ${{ matrix.path }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip show pytest || pip install pytest httpx

      - name: pytest
        working-directory: ${{ matrix.path }}
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ matrix.db }}
        run: |
          pytest -q

  build_publish:
    name: build & publish images
    needs: unit_tests
    if: ${{ needs.unit_tests.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: azure login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: build backends (with labels)
        run: |
          for svc in customer_service product_service order_service; do
            docker build \
              --pull \
              --build-arg APP_VERSION=${IMG_SHA} \
              --label "org.opencontainers.image.revision=${IMG_SHA}" \
              -t ${REGISTRY}/${REPO_PREFIX}/$svc:${IMG_SHA} ./backend/$svc
          done

      - name: build frontend
        run: |
          docker build \
            --pull \
            --build-arg APP_VERSION=${IMG_SHA} \
            --label "org.opencontainers.image.revision=${IMG_SHA}" \
            -t ${REGISTRY}/${REPO_PREFIX}/frontend:${IMG_SHA} ./frontend

      - name: push sha tags
        run: |
          for img in customer_service order_service product_service frontend; do
            docker push ${REGISTRY}/${REPO_PREFIX}/$img:${IMG_SHA}
          done

      - name: tag & push testing-latest
        run: |
          for img in customer_service order_service product_service frontend; do
            docker tag  ${REGISTRY}/${REPO_PREFIX}/$img:${IMG_SHA} ${REGISTRY}/${REPO_PREFIX}/$img:${TEST_TAG}
            docker push ${REGISTRY}/${REPO_PREFIX}/$img:${TEST_TAG}
          done
