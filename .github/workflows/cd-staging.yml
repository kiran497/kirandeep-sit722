name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]   # must match your CI workflow name
    types: [completed]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}        # e.g. kiranacr722.azurecr.io
  REPO_PREFIX: sit722
  AKS_RG: ${{ vars.AKS_RESOURCE_GROUP }}           # rg-sit722-kiran
  AKS_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}        # kiranaks722
  STAGE_NS: staging-sit722-kiran
  TAG: testing-latest

jobs:
  deploy-staging:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout testing branch (k8s lives here)
        uses: actions/checkout@v4
        with:
          ref: testing

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      - name: Ensure namespace
        run: |
          kubectl get ns "${{ env.STAGE_NS }}" >/dev/null 2>&1 || kubectl create ns "${{ env.STAGE_NS }}"
          kubectl get ns "${{ env.STAGE_NS }}"

      - name: Create/Update ACR imagePullSecret (acr-cred)
        run: |
          CLIENT_ID=$(jq -r '.clientId'    <<< '${{ secrets.AZURE_CREDENTIALS }}')
          CLIENT_SECRET=$(jq -r '.clientSecret' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          kubectl -n "${{ env.STAGE_NS }}" delete secret acr-cred >/dev/null 2>&1 || true
          kubectl -n "${{ env.STAGE_NS }}" create secret docker-registry acr-cred \
            --docker-server="${{ env.REGISTRY }}" \
            --docker-username="$CLIENT_ID" \
            --docker-password="$CLIENT_SECRET"
          kubectl -n "${{ env.STAGE_NS }}" patch serviceaccount default \
            -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Ensure DB secret (ecomm-secrets)
        run: |
          kubectl -n "${{ env.STAGE_NS }}" delete secret ecomm-secrets >/dev/null 2>&1 || true
          kubectl -n "${{ env.STAGE_NS }}" create secret generic ecomm-secrets \
            --from-literal=POSTGRES_USER=postgres \
            --from-literal=POSTGRES_PASSWORD=postgres

      - name: Apply all k8s manifests
        run: |
          test -d k8s
          kubectl -n "${{ env.STAGE_NS }}" apply -f k8s/

      - name: Pin images to testing-latest
        run: |
          kubectl -n "${{ env.STAGE_NS }}" set image deploy/customer-service customer=${{ env.REGISTRY }}/${{ env.REPO_PREFIX }}/customer_service:${{ env.TAG }}
          kubectl -n "${{ env.STAGE_NS }}" set image deploy/product-service  product=${{ env.REGISTRY }}/${{ env.REPO_PREFIX }}/product_service:${{ env.TAG }}
          kubectl -n "${{ env.STAGE_NS }}" set image deploy/order-service    order=${{ env.REGISTRY }}/${{ env.REPO_PREFIX }}/order_service:${{ env.TAG }}
          kubectl -n "${{ env.STAGE_NS }}" set image deploy/frontend         frontend=${{ env.REGISTRY }}/${{ env.REPO_PREFIX }}/frontend:${{ env.TAG }}

      - name: Wait for rollouts
        run: |
          set -e
          for d in customer-db product-db order-db customer-service product-service order-service frontend; do
            echo "Waiting for $d..."
            kubectl -n "${{ env.STAGE_NS }}" rollout status deploy/$d --timeout=300s
          done

      - name: Smoke test
        run: |
          set -e
          kubectl -n "${{ env.STAGE_NS }}" run curl --image=curlimages/curl:8.10.1 --restart=Never --command -- \
            sh -c '
              echo "customer:" && curl -sf http://customer-service:8000/ && \
              echo "product:"  && curl -sf http://product-service:8000/  && \
              echo "order:"    && curl -sf http://order-service:8000/    && \
              echo "OK"
            '
          kubectl -n "${{ env.STAGE_NS }}" delete pod curl --ignore-not-found
