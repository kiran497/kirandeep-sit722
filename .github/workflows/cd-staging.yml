name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]
    branches: [testing]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR image tag to deploy (default: testing-latest)"
        required: false
        type: string
      namespace_suffix:
        description: "Override namespace suffix (default: short SHA)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

# Avoid overlapping staging deploys
concurrency:
  group: staging-${{ github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy-staging:
    name: Deploy Staging
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest

    # Pull repo variables into the job environment in ONE place.
    env:
      AKS_RESOURCE_GROUP: ${{ vars.AKS_RESOURCE_GROUP }}   # e.g. rg-sit722-kiran
      AKS_CLUSTER_NAME:   ${{ vars.AKS_CLUSTER_NAME }}     # e.g. kiranaks722
      STAGING_NAMESPACE:  ${{ vars.STAGING_NAMESPACE }}    # e.g. staging-sit722-kiran
      REPO_PREFIX:        ${{ vars.REPO_PREFIX || 'sit722' }}
      TAG:                ${{ inputs.image_tag || 'testing-latest' }}

    steps:
      - uses: actions/checkout@v4

      # For visibility if something is empty
      - name: Sanity check variables
        run: |
          echo "AKS_RESOURCE_GROUP=${AKS_RESOURCE_GROUP}"
          echo "AKS_CLUSTER_NAME=${AKS_CLUSTER_NAME}"
          echo "STAGING_NAMESPACE=${STAGING_NAMESPACE}"
          echo "REGISTRY=${REGISTRY}"
          echo "REPO_PREFIX=${REPO_PREFIX}"
          echo "TAG=${TAG}"
          test -n "${AKS_RESOURCE_GROUP}" || { echo "::error::AKS_RESOURCE_GROUP is empty"; exit 1; }
          test -n "${AKS_CLUSTER_NAME}"   || { echo "::error::AKS_CLUSTER_NAME is empty"; exit 1; }

      - name: Azure login (OIDC or SP secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group:  ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name:    ${{ env.AKS_CLUSTER_NAME }}
          # Optional but helpful in multi-sub environments
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Ensure namespace exists
        run: kubectl get ns "$STAGING_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$STAGING_NAMESPACE"

      # If your cluster doesn't pull from ACR via managed identity, create/update an imagePullSecret
      - name: Create/Update ACR imagePullSecret
        env:
          SP_APP_ID:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASSWORD: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$STAGING_NAMESPACE" create secret docker-registry acr-cred \
            --docker-server="$REGISTRY" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASSWORD" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$STAGING_NAMESPACE" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply Kubernetes manifests
        run: kubectl apply -n "$STAGING_NAMESPACE" -f k8s/

      # Update images to the tag that CI pushed
      - name: Set images to ${TAG}
        run: |
          # plain names
          kubectl -n "$STAGING_NAMESPACE" set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n "$STAGING_NAMESPACE" set image deploy/product-service  product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG} || true
          kubectl -n "$STAGING_NAMESPACE" set image deploy/order-service    order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG} || true
          kubectl -n "$STAGING_NAMESPACE" set image deploy/frontend         frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG} || true

          # -w10-aks names
          kubectl -n "$STAGING_NAMESPACE" set image deployment/customer-service-w10-aks customer-service-container=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n "$STAGING_NAMESPACE" set image deployment/product-service-w10-aks  product-service-container=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG}   || true
          kubectl -n "$STAGING_NAMESPACE" set image deployment/order-service-w10-aks    order-service-container=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG}       || true
          kubectl -n "$STAGING_NAMESPACE" set image deployment/frontend-w10-aks         frontend-container=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG}                 || true

      - name: Wait for rollout
        run: |
          for dep in \
            customer-service product-service order-service frontend \
            customer-service-w10-aks product-service-w10-aks order-service-w10-aks frontend-w10-aks
          do
            kubectl -n "$STAGING_NAMESPACE" rollout status deployment/$dep --timeout=300s || true
          done

      - name: Smoke check
        run: |
          kubectl -n "$STAGING_NAMESPACE" get pods -o wide
          kubectl -n "$STAGING_NAMESPACE" get svc -o wide
          kubectl -n "$STAGING_NAMESPACE" get ingress -o wide || true
