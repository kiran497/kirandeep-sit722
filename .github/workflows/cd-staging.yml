name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]               # no branches filter here (works for push/PR)
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR image tag to deploy (default: testing-latest)"
        required: false
        type: string
      namespace_suffix:
        description: "Override namespace suffix (default: short SHA)"
        required: false
        type: string

env:
  REGISTRY:     ${{ secrets.ACR_LOGIN_SERVER }}         # e.g. kiranacrXXXX.azurecr.io
  REPO_PREFIX:  ${{ vars.REPO_PREFIX || 'sit722' }}     # you set 'sit722'

concurrency:
  group: staging-${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    name: Deploy Staging
    # run when: manual OR CI succeeded AND CI's source branch was 'testing'
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'testing')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      # (optional) debug the incoming workflow_run payload
      - name: Debug workflow_run
        if: github.event_name == 'workflow_run'
        run: |
          echo "head_branch=${{ github.event.workflow_run.head_branch }}"
          echo "event=${{ github.event.workflow_run.event }}"
          echo "conclusion=${{ github.event.workflow_run.conclusion }}"

      - name: Compute Image Tag and Namespace
        id: meta
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
          else
            SHA="${{ github.sha }}"
          fi
          SHORT="${SHA:0:7}"

          TAG_INPUT="${{ inputs.image_tag || '' }}"
          TAG="${TAG_INPUT:-testing-latest}"

          NS_SUFFIX="${{ inputs.namespace_suffix || '' }}"
          NS_SUFFIX="${NS_SUFFIX:-$SHORT}"
          NS="staging-$NS_SUFFIX"

          echo "TAG=$TAG"   >> "$GITHUB_OUTPUT"
          echo "NS=$NS"     >> "$GITHUB_OUTPUT"
          echo "REG=${{ env.REGISTRY }}" >> "$GITHUB_OUTPUT"
          echo "PREFIX=${{ env.REPO_PREFIX }}" >> "$GITHUB_OUTPUT"
          echo "Using REG=${{ env.REGISTRY }}, TAG=$TAG, NS=$NS, PREFIX=${{ env.REPO_PREFIX }}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name:  ${{ vars.AKS_CLUSTER_NAME }}

      - name: Create Staging Namespace
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      # Optional: only needed if AKS is NOT attached to ACR
      - name: Create ACR imagePullSecret in Namespace
        env:
          REG: ${{ steps.meta.outputs.REG }}
          NS:  ${{ steps.meta.outputs.NS }}
          SP_APP_ID:  ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASSWORD: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$NS" create secret docker-registry acr-cred \
            --docker-server="$REG" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASSWORD" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply k8s Manifests to Staging
        working-directory: k8s
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          kubectl -n "$NS" apply -f configmaps.yaml
          kubectl -n "$NS" apply -f secrets.yaml || true
          kubectl -n "$NS" apply -f rabbitmq.yaml
          kubectl -n "$NS" apply -f product-db.yaml
          kubectl -n "$NS" apply -f order-db.yaml
          kubectl -n "$NS" apply -f customer-db.yaml
          kubectl -n "$NS" apply -f product-service.yaml
          kubectl -n "$NS" apply -f order-service.yaml
          kubectl -n "$NS" apply -f customer-service.yaml
          kubectl -n "$NS" apply -f frontend.yaml || true

      - name: Set Images to Computed Tag
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          REG="${{ steps.meta.outputs.REG }}"
          PREF="${{ steps.meta.outputs.PREFIX }}"
          TAG="${{ steps.meta.outputs.TAG }}"
          kubectl -n "$NS" set image deploy/product-service  product="${REG}/${PREF}/product_service:${TAG}"   --record
          kubectl -n "$NS" set image deploy/order-service    order="${REG}/${PREF}/order_service:${TAG}"       --record
          kubectl -n "$NS" set image deploy/customer-service customer="${REG}/${PREF}/customer_service:${TAG}" --record
          kubectl -n "$NS" set image deploy/frontend         frontend="${REG}/${PREF}/frontend:${TAG}"         --record

      - name: Wait for Rollouts
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          for d in product-service order-service customer-service frontend; do
            kubectl -n "$NS" rollout status deploy/$d --timeout=600s
          done

      - name: Acceptance Checks
        run: |
          set -e
          NS="${{ steps.meta.outputs.NS }}"
          kubectl -n "$NS" port-forward svc/product-service 18000:8000 >/dev/null 2>&1 &
          P1=$!
          kubectl -n "$NS" port-forward svc/order-service   18001:8000 >/dev/null 2>&1 &
          P2=$!
          kubectl -n "$NS" port-forward svc/customer-service 18002:8000 >/dev/null 2>&1 &
          P3=$!
          sleep 5
          curl -sf http://127.0.0.1:18000/health | cat
          curl -sf http://127.0.0.1:18001/health | cat
          curl -sf http://127.0.0.1:18002/health | cat
          kubectl -n "$NS" port-forward svc/frontend 18003:80 >/dev/null 2>&1 &
          P4=$!
          sleep 2
          curl -sf http://127.0.0.1:18003/ | head -n 1 | cat || true
          kill $P1 $P2 $P3 $P4 || true

      - name: Basic Smoke (Pods & Services)
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          kubectl -n "$NS" get pods -o wide
          kubectl -n "$NS" get svc  -o wide

      - name: Destroy Staging Environment
        if: always()
        run: |
          kubectl delete ns "${{ steps.meta.outputs.NS }}" --wait=false
