name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]
    branches: [testing]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR image tag to deploy (default: testing-latest)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: staging-${{ github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy-staging:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    env:
      AKS_RG:      ${{ vars.AKS_RESOURCE_GROUP }}
      AKS_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}
      STAGE_NS:    ${{ vars.STAGING_NAMESPACE }}
      REPO_PREFIX: ${{ vars.REPO_PREFIX || 'sit722' }}
      TAG:         ${{ inputs.image_tag || 'testing-latest' }}

    steps:
      # Checkout the commit that produced the images (or current when manual)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || 'testing' }}
          fetch-depth: 1

      # Locate manifests robustly
      - name: Locate k8s manifests
        id: find
        shell: bash
        run: |
          set -e
          for d in ./k8s ./K8s ./deploy/k8s ./manifests; do
            if [ -d "$d" ] && ls "$d"/*.yaml >/dev/null 2>&1; then
              echo "K8S_DIR=$d" >>"$GITHUB_OUTPUT"
              exit 0
            fi
          done
          echo "::error::No k8s folder with *.yaml found"; exit 1

      # Remove hard-coded namespace lines so -n works
      - name: Sanitize namespaces
        id: sanitize
        shell: bash
        run: |
          set -e
          TMP=$(mktemp -d)
          cp -r "${{ steps.find.outputs.K8S_DIR }}/." "$TMP/"
          find "$TMP" -type f -name "*.yaml" -print0 | xargs -0 sed -i '/^[[:space:]]*namespace:[[:space:]].*$/d'
          echo "SANITIZED=$TMP" >>"$GITHUB_OUTPUT"

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name:   ${{ env.AKS_CLUSTER }}
          subscription:   ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Ensure namespace exists
        run: kubectl get ns "$STAGE_NS" >/dev/null 2>&1 || kubectl create ns "$STAGE_NS"

      - name: Create/Update ACR imagePullSecret
        env:
          SP_APP_ID:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASSWORD: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$STAGE_NS" create secret docker-registry acr-cred \
            --docker-server="$REGISTRY" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASSWORD" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$STAGE_NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply Kubernetes manifests
        run: kubectl apply -n "$STAGE_NS" -f "${{ steps.sanitize.outputs.SANITIZED }}"

      - name: Set images to tag
        run: |
          kubectl -n "$STAGE_NS" set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n "$STAGE_NS" set image deploy/product-service  product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG} || true
          kubectl -n "$STAGE_NS" set image deploy/order-service    order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG} || true
          kubectl -n "$STAGE_NS" set image deploy/frontend         frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG} || true

      - name: Wait for rollout
        run: |
          for dep in customer-service product-service order-service frontend; do
            kubectl -n "$STAGE_NS" rollout status deploy/$dep --timeout=300s || exit 1
          done

      - name: Smoke check
        run: |
          kubectl -n "$STAGE_NS" get pods -o wide
          kubectl -n "$STAGE_NS" get svc  -o wide
