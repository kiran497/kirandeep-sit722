name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]
    branches: [testing]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR image tag to deploy (default: testing-latest)"
        required: false
        type: string
      namespace_suffix:
        description: "Override namespace suffix (default: short SHA)"
        required: false
        type: string

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

concurrency:
  group: staging-${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    name: Deploy Staging
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Compute Image Tag and Namespace
        id: meta
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
          else
            SHA="${{ github.sha }}"
          fi
          SHORT="${SHA:0:7}"

          TAG="${{ inputs.image_tag || '' }}"
          if [ -z "$TAG" ]; then TAG="testing-latest"; fi

          NS_SUFFIX="${{ inputs.namespace_suffix || '' }}"
          if [ -z "$NS_SUFFIX" ]; then NS_SUFFIX="$SHORT"; fi
          NS="staging-$NS_SUFFIX"

          {
            echo "TAG=$TAG"
            echo "NS=$NS"
            echo "REG=${{ env.REGISTRY }}"
          } >> "$GITHUB_OUTPUT"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name:  ${{ vars.AKS_CLUSTER_NAME }}

      - name: Create Staging Namespace (if missing)
        shell: bash
        run: |
          NS="${{ steps.meta.outputs.NS }}"
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      - name: Create ACR imagePullSecret in Namespace
        env:
          REG: ${{ steps.meta.outputs.REG }}
          NS:  ${{ steps.meta.outputs.NS }}
          SP_APP_ID:  ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASSWORD: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$NS" create secret docker-registry acr-cred \
            --docker-server="$REG" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASSWORD" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Patch ServiceAccount to use imagePullSecret
        env:
          NS: ${{ steps.meta.outputs.NS }}
        run: |
          kubectl -n "$NS" patch serviceaccount default \
            -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply k8s Manifests to Staging
        working-directory: k8s
        env:
          NS: ${{ steps.meta.outputs.NS }}
        run: |
          kubectl -n "$NS" apply -f configmaps.yaml
          kubectl -n "$NS" apply -f secrets.yaml || true
          kubectl -n "$NS" apply -f rabbitmq.yaml
          kubectl -n "$NS" apply -f product-db.yaml
          kubectl -n "$NS" apply -f order-db.yaml
          kubectl -n "$NS" apply -f customer-db.yaml
          kubectl -n "$NS" apply -f product-service.yaml
          kubectl -n "$NS" apply -f order-service.yaml
          kubectl -n "$NS" apply -f customer-service.yaml
          kubectl -n "$NS" apply -f frontend.yaml || true

      - name: Set Images to Computed Tag
        env:
          NS:  ${{ steps.meta.outputs.NS }}
          REG: ${{ steps.meta.outputs.REG }}
          TAG: ${{ steps.meta.outputs.TAG }}
        run: |
          kubectl -n "$NS" set image deployment/product-service-w10-aks \
            product-service-container="$REG/product_service:$TAG"
          kubectl -n "$NS" set image deployment/order-service-w10-aks \
            order-service-container="$REG/order_service:$TAG"
          kubectl -n "$NS" set image deployment/customer-service-w10-aks \
            customer-service-container="$REG/customer_service:$TAG"
          kubectl -n "$NS" set image deployment/frontend-w10-aks \
            frontend-container="$REG/frontend:$TAG" || true

      - name: Wait for Rollouts
        env:
          NS: ${{ steps.meta.outputs.NS }}
        run: |
          kubectl -n "$NS" rollout status deployment/product-service-w10-aks --timeout=600s
          kubectl -n "$NS" rollout status deployment/order-service-w10-aks   --timeout=600s
          kubectl -n "$NS" rollout status deployment/customer-service-w10-aks --timeout=600s
          kubectl -n "$NS" rollout status deployment/frontend-w10-aks --timeout=600s || true

      - name: Acceptance Checks (/health)
        env:
          NS: ${{ steps.meta.outputs.NS }}
        run: |
          set -e
          kubectl -n "$NS" port-forward svc/product-service-w10-aks  18000:8000 >/dev/null 2>&1 &
          P1=$!
          kubectl -n "$NS" port-forward svc/order-service-w10-aks    18001:8000 >/dev/null 2>&1 &
          P2=$!
          kubectl -n "$NS" port-forward svc/customer-service-w10-aks 18002:8000 >/dev/null 2>&1 &
          P3=$!
          sleep 5
          curl -sf http://127.0.0.1:18000/health | cat
          curl -sf http://127.0.0.1:18001/health | cat
          curl -sf http://127.0.0.1:18002/health | cat
          kill $P1 $P2 $P3 || true

      - name: Basic Smoke (pods & svcs)
        env:
          NS: ${{ steps.meta.outputs.NS }}
        run: |
          kubectl -n "$NS" get pods
          kubectl -n "$NS" get svc
