name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]
    branches: [testing]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR tag to deploy (default: testing-latest)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: stage-${{ github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy-staging:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    env:
      AKS_RG:      ${{ vars.AKS_RESOURCE_GROUP }}
      AKS_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}
      NS:          ${{ vars.STAGING_NAMESPACE }}
      REPO:        ${{ vars.REPO_PREFIX || 'sit722' }}
      TAG:         ${{ inputs.image_tag != '' && inputs.image_tag || 'testing-latest' }}

    steps:
      - name: Checkout triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.head_sha) || github.sha }}
          fetch-depth: 1

      - name: Locate Kubernetes manifests
        id: find
        shell: bash
        run: |
          set -euo pipefail
          for d in k8s K8s deploy/k8s manifests; do
            if [[ -d "$d" ]] && compgen -G "$d/*.y*ml" > /dev/null; then
              echo "dir=$d" >> "$GITHUB_OUTPUT"
              echo "Manifests: $d"
              exit 0
            fi
          done
          echo "::error::No folder with Kubernetes YAMLs found (looked in: k8s, K8s, deploy/k8s, manifests)"
          echo "Tree:"; find . -maxdepth 2 -type d -print
          exit 1

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name:   ${{ env.AKS_CLUSTER }}
          subscription:   ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Ensure namespace & imagePullSecret
        env:
          SP_APP_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASS:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"
          kubectl -n "$NS" create secret docker-registry acr-cred \
            --docker-server="$REGISTRY" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASS" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply manifests
        run: kubectl apply -n "$NS" -f "${{ steps.find.outputs.dir }}"

      - name: Pin images to tag
        run: |
          set -e
          declare -A MAP=(
            [customer-service]="${REGISTRY}/${REPO}/customer_service:${TAG}"
            [product-service]="${REGISTRY}/${REPO}/product_service:${TAG}"
            [order-service]="${REGISTRY}/${REPO}/order_service:${TAG}"
            [frontend]="${REGISTRY}/${REPO}/frontend:${TAG}"
            [customer-service-w10-aks]="${REGISTRY}/${REPO}/customer_service:${TAG}"
            [product-service-w10-aks]="${REGISTRY}/${REPO}/product_service:${TAG}"
            [order-service-w10-aks]="${REGISTRY}/${REPO}/order_service:${TAG}"
            [frontend-w10-aks]="${REGISTRY}/${REPO}/frontend:${TAG}"
          )
          for dep in "${!MAP[@]}"; do
            kubectl -n "$NS" set image deployment/$dep "*=${MAP[$dep]}" --record=false 2>/dev/null || true
          done

      - name: Wait for rollouts
        run: |
          for d in customer-service product-service order-service frontend \
                   customer-service-w10-aks product-service-w10-aks order-service-w10-aks frontend-w10-aks
          do
            kubectl -n "$NS" rollout status deployment/$d --timeout=300s || true
          done

      - name: Smoke inventory
        run: |
          kubectl -n "$NS" get pods -o wide
          kubectl -n "$NS" get svc -o wide
          kubectl -n "$NS" get ingress -o wide || true
