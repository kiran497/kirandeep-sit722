name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]

permissions:
  id-token: write
  contents: read

# prevent overlapping deploys
concurrency:
  group: staging-${{ github.event.workflow_run.head_sha || github.run_id }}
  cancel-in-progress: true

# global env
env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REPO_PREFIX: ${{ vars.REPO_PREFIX || 'sit722' }}
  AKS_RG: ${{ vars.AKS_RG }}
  AKS_CLUSTER: ${{ vars.AKS_CLUSTER }}
  STAGE_NS: ${{ vars.STAGE_NS }}
  TAG: testing-latest

jobs:
  deploy:
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'testing'
      }}
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }

    # ⬇️ Map repo VARIABLES to the env names used by the steps
    env:
      AKS_RG:         ${{ vars.AKS_RESOURCE_GROUP }}   # e.g. rg-sit722-kiran
      AKS_CLUSTER:    ${{ vars.AKS_CLUSTER_NAME }}     # e.g. kiranaks722
      STAGE_NS:       ${{ vars.STAGING_NAMESPACE }}    # e.g. staging-sit722-kiran
      REPO_PREFIX:    ${{ vars.REPO_PREFIX || 'sit722' }}
      TAG:            ${{ inputs.image_tag || 'testing-latest' }}

    steps:
      # Checkout the commit that produced the images (for workflow_run),
      # otherwise the current SHA for manual runs
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      - name: Ensure namespace
        run: kubectl get ns $STAGE_NS || kubectl create ns $STAGE_NS

      - name: Apply Kubernetes manifests
        run: kubectl apply -n $STAGE_NS -f k8s/

      - name: Set images to testing-latest
        run: |
          kubectl -n $STAGE_NS set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n $STAGE_NS set image deploy/product-service  product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG} || true
          kubectl -n $STAGE_NS set image deploy/order-service    order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG} || true
          kubectl -n $STAGE_NS set image deploy/frontend         frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG} || true

      - name: Wait for rollout
        env: { NS: ${{ steps.meta.outputs.NS }} }
        run: |
          for d in customer-service product-service order-service frontend; do
            kubectl -n $STAGE_NS rollout status deploy/$d --timeout=180s
          done

      - name: Smoke check (basic)
        run: kubectl -n $STAGE_NS get pods,svc,ingress -o wide
