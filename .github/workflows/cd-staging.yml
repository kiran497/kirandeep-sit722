name: CD - Stage 2 (Staging)

on:
  workflow_run:
    workflows: ["CI - Stage 1 (Testing)"]
    types: [completed]
    branches: [testing]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ACR tag to deploy (default: testing-latest)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: staging-${{ github.event.workflow_run.head_sha || github.sha }}
  cancel-in-progress: true

env:
  REGISTRY:   ${{ secrets.ACR_LOGIN_SERVER }}                 # e.g. kiranacr722.azurecr.io
  TAG:        ${{ inputs.image_tag || 'testing-latest' }}
  # Read repo vars
  AKS_RG:         ${{ vars.AKS_RESOURCE_GROUP  || 'rg-sit722-kiran' }}
  AKS_CLUSTER:    ${{ vars.AKS_CLUSTER_NAME   || 'kiranaks722' }}
  STAGE_NS:       ${{ vars.STAGING_NAMESPACE  || 'staging-sit722-kiran' }}
  REPO_PREFIX:    ${{ vars.REPO_PREFIX        || 'sit722' }}

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # Checkout the SAME commit that CI built, so k8s/ exists
      - name: Checkout (CI commit)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Show resolved config
        run: |
          echo "AKS_RG=${AKS_RG}"
          echo "AKS_CLUSTER=${AKS_CLUSTER}"
          echo "STAGE_NS=${STAGE_NS}"
          echo "REGISTRY=${REGISTRY}"
          echo "REPO_PREFIX=${REPO_PREFIX}"
          echo "TAG=${TAG}"

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group:  ${{ env.AKS_RG }}
          cluster-name:    ${{ env.AKS_CLUSTER }}
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Ensure namespace
        run: kubectl get ns "$STAGE_NS" >/dev/null 2>&1 || kubectl create ns "$STAGE_NS"

      # ACR pull secret (safe if MI isnâ€™t configured)
      - name: Create/Update imagePullSecret
        env:
          SP_APP_ID:  ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_SECRET:  ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$STAGE_NS" create secret docker-registry acr-cred \
            --docker-server="$REGISTRY" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_SECRET" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$STAGE_NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply Kubernetes manifests
        run: kubectl apply -n "$STAGE_NS" -f k8s/

      - name: Set images to tag
        run: |
          # classic names
          kubectl -n "$STAGE_NS" set image deploy/customer-service customer=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n "$STAGE_NS" set image deploy/product-service  product=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG}  || true
          kubectl -n "$STAGE_NS" set image deploy/order-service    order=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG}      || true
          kubectl -n "$STAGE_NS" set image deploy/frontend         frontend=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG}        || true

          # -w10-aks names (if your manifests use these)
          kubectl -n "$STAGE_NS" set image deploy/customer-service-w10-aks customer-service-container=${REGISTRY}/${REPO_PREFIX}/customer_service:${TAG} || true
          kubectl -n "$STAGE_NS" set image deploy/product-service-w10-aks  product-service-container=${REGISTRY}/${REPO_PREFIX}/product_service:${TAG}  || true
          kubectl -n "$STAGE_NS" set image deploy/order-service-w10-aks    order-service-container=${REGISTRY}/${REPO_PREFIX}/order_service:${TAG}      || true
          kubectl -n "$STAGE_NS" set image deploy/frontend-w10-aks         frontend-container=${REGISTRY}/${REPO_PREFIX}/frontend:${TAG}                || true

      - name: Wait for rollout
        run: |
          set -x
          for d in customer-service product-service order-service frontend \
                   customer-service-w10-aks product-service-w10-aks order-service-w10-aks frontend-w10-aks
          do
            kubectl -n "$STAGE_NS" rollout status deployment/$d --timeout=300s || true
          done

      - name: Smoke check
        run: |
          kubectl -n "$STAGE_NS" get pods -o wide
          kubectl -n "$STAGE_NS" get svc  -o wide
          kubectl -n "$STAGE_NS" get ingress -o wide || true
